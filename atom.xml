<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[asynch.ro]]></title>
  <link href="http://asynch.ro/atom.xml" rel="self"/>
  <link href="http://asynch.ro/"/>
  <updated>2015-03-04T09:08:48-08:00</updated>
  <id>http://asynch.ro/</id>
  <author>
    <name><![CDATA[Benjamen Keroack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git is actually OK for (some) binaries]]></title>
    <link href="http://asynch.ro/blog/2015/03/04/git-is-actually-ok-for-some-binaries/"/>
    <updated>2015-03-04T07:52:53-08:00</updated>
    <id>http://asynch.ro/blog/2015/03/04/git-is-actually-ok-for-some-binaries</id>
    <content type="html"><![CDATA[<p>In hacker circles there&rsquo;s a common urban legend that it is somehow &ldquo;bad&rdquo; or inefficient to version binary files with git (<a href="https://confluence.atlassian.com/display/BITBUCKET/Reduce+repository+size#Reducerepositorysize-DeletingFilesandotherMaintenance">&ldquo;DVCS systems are not good candidates for storing binary files&rdquo;</a>, <a href="https://robinwinslow.co.uk/2013/06/11/dont-ever-commit-binary-files-to-git/">&ldquo;Don&rsquo;t ever commit binary files to git&rdquo;</a>). In one recent Hacker News post, a commenter went so far as to write <a href="https://news.ycombinator.com/item?id=9139960">&ldquo;Anyone checking in 500MB artifacts into git is almost certainly refusing to use git correctly&rdquo;</a>. While 500MB may be a little on the big side for my taste,
as long as they are the <em>right type</em> of binaries it should not be an issue.</p>

<p>So let&rsquo;s discuss the types of binaries you might consider versioning within git<sup>1</sup>.</p>

<p>Binary files that fit these constraints are good candidates for git versioning:</p>

<ul>
<li>Localized, relatively small changes between revisions (this mostly implies compressibility).</li>
<li>Proportionality between source changes and resulting binary changes (ie, if the asset is produced by some process&mdash;compilation, etc&mdash;a small change in the source will result in a proportionately small change in the binary)</li>
<li>&le; 150MB in size per file<sup>2</sup></li>
</ul>


<p>The reason these types of files work well in git is because git stores revisions as binary deltas, which are precisely what we want. In fact that&rsquo;s exactly how <a href="http://aws.amazon.com/codedeploy/">Amazon CodeDeploy</a> and my similar open source project <a href="https://github.com/bkeroack/elita">Elita</a> manage binary code deployments &mdash; by committing compiled files into a git repository, pushing to a central repository and then git pulling in the changes on the target servers.</p>

<p>Let&rsquo;s do a little test.</p>

<p>I have a simple Go program that I want to compile and version in git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Hello, world!\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/go/src/gittest
</span><span class='line'><span class="nv">$ </span>go build
</span><span class='line'><span class="nv">$ </span>ls -lh
</span><span class='line'>total 3776
</span><span class='line'>-rwxr-xr-x  1 bk  staff   1.8M Mar  4 08:17 gittest
</span><span class='line'>-rw-rw-r--  1 bk  staff    75B Mar  4 08:16 test.go
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ll create a git repo and check these files in. Go programs compile to native machine code so this would be similar if the program was written in C or C++.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git init
</span><span class='line'>Initialized empty Git repository in /Users/bk/go/src/gittest/.git/
</span><span class='line'><span class="nv">$ </span>git add -A
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;initial version&quot;</span>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 9a381bd<span class="o">]</span> initial version
</span><span class='line'> 2 files changed, 7 insertions<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'> create mode 100755 gittest
</span><span class='line'> create mode 100644 test.go
</span></code></pre></td></tr></table></div></figure>


<p>Now lets make a small change to our source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Hello, Arbre!\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile, commit it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go build
</span><span class='line'><span class="nv">$ </span>git add -A <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;second version&quot;</span>
</span><span class='line'><span class="o">[</span>master a00b091<span class="o">]</span> second version
</span><span class='line'> 2 files changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>, 1 deletion<span class="o">(</span>-<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool. Now let&rsquo;s generate a binary patch for the executable and see how big it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff --binary master~1:gittest gittest &gt; ./diff.patch
</span><span class='line'><span class="nv">$ </span>ls -lh
</span><span class='line'>total 3784
</span><span class='line'>drwxr-xr-x  12 bk  staff   408B Mar  4 08:34 .git
</span><span class='line'>-rw-r--r--   1 bk  staff   404B Mar  4 08:39 diff.patch
</span><span class='line'>-rwxr-xr-x   1 bk  staff   1.8M Mar  4 08:34 gittest
</span><span class='line'>-rw-rw-r--   1 bk  staff    75B Mar  4 08:34 test.go
</span></code></pre></td></tr></table></div></figure>


<p>404 bytes! Nice. Here&rsquo;s what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>diff --git a/gittest b/gittest
</span><span class='line'>index 77923533b0c042ef0c45dda307bbc9c938070a87..ec7b9ebaf7c0e486a2faca8c55143824a1473016 100755
</span><span class='line'>GIT binary patch
</span><span class='line'>delta 107
</span><span class='line'><span class="nv">zcmWN</span><span class="o">=</span>w+Vni00mIYIp?s9s<span class="p">|</span>YS<span class="p">|</span>VsG<span class="o">)</span>m<span class="o">)</span>?ow<span class="o">}</span>xmnKU3jc<span class="nv">$5</span>%j1^E2?Hi9*l^<span class="o">&amp;&amp;</span>gO30q
</span><span class='line'>mBE<span class="o">(</span>PfDQ6L@*e&lt;OSPC4V83og0hnj3Dp&lt;DLf<span class="p">|</span>d3v&gt;<span class="o">)</span>&gt;-<span class="sb">`</span>7IJUHI~
</span><span class='line'>
</span><span class='line'>delta 107
</span><span class='line'><span class="nv">zcmWN</span><span class="o">=</span>xe0<span class="o">(</span>k00cn%<span class="p">|</span>Ns0g<span class="p">&amp;</span>rlE<span class="o">)</span>F*R5<span class="o">)</span>wHU!hu9h&lt;~a0lj++a&lt;RH8gv*iVZnw27an<span class="o">{</span>B
</span><span class='line'><span class="nv">l2</span><span class="o">=</span>C<span class="o">}</span>s<span class="o">)</span><span class="p">;</span><span class="o">=</span>%Ocz!D4m<span class="o">=</span>jJp&lt;D3f?Tyn<span class="o">)</span>VH<span class="o">{</span>5c^<span class="o">{</span>qw0otUue?IU4<span class="sb">`</span>~
</span></code></pre></td></tr></table></div></figure>


<p>That looks like a nice clean binary delta to me. Certainly it isn&rsquo;t an entire copy of the second version of the file.</p>

<p>Now let&rsquo;s check out the original version of the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout master~1 2&gt; /dev/null
</span><span class='line'><span class="nv">$ </span>./gittest
</span><span class='line'>Hello, world!
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and apply the patch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git apply ./diff.patch
</span><span class='line'><span class="nv">$ </span>./gittest
</span><span class='line'>Hello, Arbre!
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the patched binary runs perfectly!</p>

<p>One final thing. Let&rsquo;s check the size of the git metadata:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -lh
</span><span class='line'>total 3784
</span><span class='line'>drwxr-xr-x  12 bk  staff   408B Mar  4 08:41 .git
</span><span class='line'>-rw-r--r--   1 bk  staff   404B Mar  4 08:39 diff.patch
</span><span class='line'>-rwxr-xr-x   1 bk  staff   1.8M Mar  4 08:42 gittest
</span><span class='line'>-rw-r--r--   1 bk  staff    75B Mar  4 08:41 test.go
</span><span class='line'><span class="nv">$ </span>du -hs ./.git/
</span><span class='line'>1.3M  ./.git/
</span></code></pre></td></tr></table></div></figure>


<p>1.3MB is less than the size of a single copy of the original binary (likely due to compression). This proves that git is not storing our binary revisions as entire copies of the file but as much more efficient deltas.</p>

<p>For which types of binary files would git <em>not</em> be appropriate?</p>

<p>Anything where changes between revisions are scattered throughout the file&mdash;for example, anything encrypted with a modern cipher will likely be almost completely different for even the most tiny of changes to the original plain text. Similar results can occur from compression.</p>

<p>It will take some experimentation to see if your particular binary assets will work efficiently. Compiled executable binaries work particularly well. I&rsquo;ve used git for both native machine code binaries and .NET CLR binaries&mdash;I haven&rsquo;t tested JVM binaries specifically but imagine they would be similar. Images, music, etc may also be worth experimenting with.</p>

<p>Thanks for reading and feel free to leave a comment with any corrections or additional info!</p>

<hr />

<ol>
<li><p>I say git specifically because it is relatively smart about versioning binary assets as shown in this post, versus something like Mercurial which&mdash;last I knew&mdash;simply stored binary file revisions as flat blobs of the full file.</p></li>
<li><p>This may actually be an urban legend as well. I&rsquo;m not familiar with git internals but my understanding is that the binary diffing algorithm gets inefficient above this threshold. I would love to hear if that is incorrect.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elita 0.59 Released]]></title>
    <link href="http://asynch.ro/blog/2014/08/29/elita-0-dot-59-released/"/>
    <updated>2014-08-29T18:13:07-07:00</updated>
    <id>http://asynch.ro/blog/2014/08/29/elita-0-dot-59-released</id>
    <content type="html"><![CDATA[<p>I&rsquo;m proud to announce the first public release of <a href="https://bitbucket.org/scorebig/elita">Elita</a>, the continuous deployment engine I wrote
for ScoreBig in Python.</p>

<p>There still are a bunch of features I want to implement but we are using it routinely on a daily basis and it&rsquo;s pretty
stable so far.</p>

<p>Find it on PyPI: <a href="http://pypi.python.org/pypi/elita">http://pypi.python.org/pypi/elita</a></p>

<p>The docs are here: <a href="http://elita.readthedocs.org">http://elita.readthedocs.org</a> (a little outdated but nothing major)</p>

<p>Feel free to ask any questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime Type Verification in Python]]></title>
    <link href="http://asynch.ro/blog/2014/07/15/runtime-typing-in-python/"/>
    <updated>2014-07-15T12:54:28-07:00</updated>
    <id>http://asynch.ro/blog/2014/07/15/runtime-typing-in-python</id>
    <content type="html"><![CDATA[<p>In this post I advocate for a particular style of Python coding which I call &ldquo;Runtime Type Verification&rdquo; (RTV), in order to
help you write code that has clearer intent, fewer implicit assumptions, and&mdash;hopefully&mdash;fewer bugs.</p>

<p>Just to be clear: Python doesn&rsquo;t need type checking like a statically-typed language. If you are coming to Python from
another language with static typing, <em>please</em> don&rsquo;t try to force those idioms on Python. However I think it&rsquo;s useful to
deal with types explicitly <em>when they matter</em> which, as we will see, is a lot of the time.</p>

<h2>The Problem</h2>

<p>In a nutshell: most (or all) of the methods you write have implicit assumptions about the parameters they accept.</p>

<p>For example, function/method parameters (I&rsquo;ll use the term &ldquo;function&rdquo; to mean both functions and class methods) by default
will happily accept NoneType objects (as would be expected). However
in a lot of cases&mdash;probably the majority&mdash;functions aren&rsquo;t designed to deal with None, resulting in the familiar
&ldquo;<em>TypeError: &lsquo;NoneType&rsquo; object has no attribute [foo]</em>&rdquo; exceptions. This is sort of Python&rsquo;s version of a null reference
exception.</p>

<p>Typically people ignore the possibility of None with the rationale that the code will break somewhere anyway
and some exception will be thrown somewhere. However we want to fail as early as possible, and RTV helps
to make sure that parameter assumptions are enforced.</p>

<p>Another example might a function that expects a dictionary with specific set of keys, or a list of length between X and Y.
The possibilities go on. It&rsquo;s quite unusual to write a function that has zero knowledge of the arguments passed to it.</p>

<p>You might have a function or method like the following:</p>

<figure class='code'><figcaption><span>Example  (rtc_func_ex1.py)</span> <a href='http://asynch.ro/downloads/code/rtc_func_ex1.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">NewUser</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="p">):</span>
</span><span class='line'>    <span class="n">user_obj</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">save_to_database</span><span class="p">(</span><span class="n">user_obj</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What implicit assumptions does this function make?</p>

<ul>
<li>&lsquo;name&rsquo; exists (is not None) and is a string (or string-like)</li>
<li>&lsquo;categories&rsquo; exists (is not None) and is an iterable like list or tuple. (You might extend the assumption to say
that the iterable contains objects of type <strong>str</strong> or even valid categories that exist)</li>
<li>&lsquo;attributes&rsquo; is also a container type of some sort (in this case we will say that the function expects it to be a
dict) but may be empty or None.</li>
</ul>


<h2>A Solution</h2>

<p>Let&rsquo;s encode all these assumptions in the preamble to the function (and add a docstring while we&rsquo;re at it):</p>

<figure class='code'><figcaption><span>Typed Example  (rtc_typing_example.py)</span> <a href='http://asynch.ro/downloads/code/rtc_typing_example.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">NewUser</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Create a new user.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param name: username</span>
</span><span class='line'><span class="sd">    :param categories: iterable with categories the user belongs to</span>
</span><span class='line'><span class="sd">    :param attributes: optional dictionary of attributes</span>
</span><span class='line'><span class="sd">    :return: boolean indicating database write success</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">name</span> <span class="ow">and</span> <span class="n">categories</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">categories</span><span class="p">,</span> <span class="s">&#39;__iter__&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="ow">not</span> <span class="n">attributes</span> <span class="ow">or</span> <span class="p">(</span><span class="nb">hasattr</span><span class="p">(</span><span class="n">attributes</span><span class="p">,</span> <span class="s">&#39;__getitem__&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">attributes</span><span class="p">,</span> <span class="s">&#39;__setitem__&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user_obj</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">save_to_database</span><span class="p">(</span><span class="n">user_obj</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the following:</p>

<ul>
<li>We assert that the mandatory arguments exist (this will catch any arguments that are None). The first assert
guarantees that both arguments are not None and that empty strings/iterables will be caught.</li>
<li>We assert that they have the interface/methods that we expect (more on that below).</li>
<li>We allow an optional argument which <em>can</em> be None or a dictionary-like object but nothing else.</li>
</ul>


<p>Notice in the above example, I did not do either of the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">categories</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span>    <span class="c">#BAD</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">attributes</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span>    <span class="c">#BAD</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why not?</p>

<h2><a name="assert_behavior"></a> Assert Behavior (or Interface), Not Identity</h2>

<p>One of the many beautiful things about Python is that we don&rsquo;t usually need to care what exact class a given object is,
as long as it exposes the methods/behavior (aka interface) that we need. If I wrote the bad example above and a subsequent user of the
function passed in a duck-typed dict-like object, the function would fail. That would suck and is unnecessarily restrictive.</p>

<p>Instead, assert the presence of the methods we require. For most uses, the minimum interface of a dictionary-like object
is the &lsquo;__getitem__&rsquo; and &lsquo;__setitem__&rsquo; methods, so we&rsquo;ll make sure they exist and nothing else. Similarly, the minimum interface
of an iterable is the &lsquo;__iter__&rsquo; method. We assert the existence of both of those above.</p>

<p>You could create helper functions to make the code a bit more concise:</p>

<figure class='code'><figcaption><span>Typed Example 2  (rtc_typing_example2.py)</span> <a href='http://asynch.ro/downloads/code/rtc_typing_example2.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">is_dict_like</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">&#39;__getitem__&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">&#39;__setitem__&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_iterable</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">&#39;__iter__&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_optional_dict</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="ow">not</span> <span class="n">obj</span> <span class="ow">or</span> <span class="n">is_dict_like</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">NewUser</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Create a new user.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param name: username</span>
</span><span class='line'><span class="sd">    :param categories: iterable with categories the user belongs to</span>
</span><span class='line'><span class="sd">    :param attributes: optional dictionary of attributes</span>
</span><span class='line'><span class="sd">    :return: boolean indicating database write success</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">name</span> <span class="ow">and</span> <span class="n">categories</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">is_iterable</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">is_optional_dict</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user_obj</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">save_to_database</span><span class="p">(</span><span class="n">user_obj</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arguably if you want to be more correct you could use the abstract base classes defined in the
<a href="https://docs.python.org/2/library/collections.html">collections module</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">collections</span>
</span><span class='line'><span class="c">#[...]</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">categories</span><span class="p">,</span> <span class="n">collections</span><span class="o">.</span><span class="n">Sequence</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">attributes</span><span class="p">,</span> <span class="n">collections</span><span class="o">.</span><span class="n">Mapping</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that in the earlier example I <em>am</em> explicitly testing that &ldquo;name&rdquo; is of class <strong>str</strong>, contradicting the rule. For the
base types <strong>str</strong>, <strong>int</strong> , <strong>float</strong>, etc., I don&rsquo;t see a problem with testing the class directly. There
could be instances where this would be wrong (if you&rsquo;re doing something funky with integer methods for example). YMMV.</p>

<h2>Redundant Verification</h2>

<p>Some might argue that if you follow the RTV pattern religiously you will have a lot of redundant verification going on.
If Foo() calls Bar() which calls Baz(), passing certain common parameters down, why bother to check them in all three
functions?</p>

<p>The reason is that you want to the failure to be caught as early in the call stack as possible after the data error occurs. Bad
data will always cause a failure somewhere even with no verification at all. The whole point of RTV is to surface the cause
more easily by failing fast.</p>

<p>The other reason is that maybe Foo() and Bar() will be decoupled at some point in the future. You want to make sure those
parameters are always verified for all users of the functions.</p>

<h2>Taking It Further</h2>

<p>Since we are using asserts to verify function parameter types, why not also use them inside function bodies (or at the end,
before returning values)?</p>

<p>Let&rsquo;s modify our example function slightly:</p>

<figure class='code'><figcaption><span>Typed Example 3  (rtc_typing_example3.py)</span> <a href='http://asynch.ro/downloads/code/rtc_typing_example3.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">is_dict_like</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">&#39;__getitem__&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">&#39;__setitem__&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_iterable</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">&#39;__iter__&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_optional_dict</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="ow">not</span> <span class="n">obj</span> <span class="ow">or</span> <span class="n">is_dict_like</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">NewUser</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Create a new user.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param name: username</span>
</span><span class='line'><span class="sd">    :param categories: iterable with categories the user belongs to</span>
</span><span class='line'><span class="sd">    :param attributes: optional dictionary of attributes</span>
</span><span class='line'><span class="sd">    :return: dictionary containing the user object fields if successful or None</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">name</span> <span class="ow">and</span> <span class="n">categories</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">is_iterable</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">is_optional_dict</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user_obj</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">save_to_database</span><span class="p">(</span><span class="n">user_obj</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="ow">not</span> <span class="n">result</span> <span class="ow">or</span> <span class="p">(</span><span class="n">is_dict_like</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="ow">and</span> <span class="s">&#39;name&#39;</span> <span class="ow">in</span> <span class="n">result</span> <span class="ow">and</span> <span class="s">&#39;categories&#39;</span> <span class="ow">in</span> <span class="n">result</span> <span class="ow">and</span> <span class="s">&#39;attributes&#39;</span> <span class="ow">in</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice we&rsquo;ve changed the return type of save_to_database() to now return a dictionary of user object values if successful
or None if there was a failure. Rather than return the value without interrogation, we assert that the return value fits the
structure we are expecting.</p>

<p>Note that I&rsquo;m not saying to follow this exact pattern in <em>every</em> circumstance, there are certainly places where it would
be redundant and verbose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#stupid and unnecessary</span>
</span><span class='line'><span class="n">list_of_stuff</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">,</span> <span class="s">&quot;baz&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="s">&quot;foo&quot;</span> <span class="ow">in</span> <span class="n">list_of_stuff</span> <span class="ow">and</span> <span class="s">&quot;bar&quot;</span> <span class="ow">in</span> <span class="n">list_of_stuff</span> <span class="ow">and</span> <span class="s">&quot;baz&quot;</span> <span class="ow">in</span> <span class="n">list_of_stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>I <strong>do</strong> think it is worth verifying the results of certain functions/methods if the results are structured,
at least moderately complex and failure is a possibility. Especially third party ones where the return type might change
unexpectedly.</p>

<h2>Other Solutions</h2>

<p>Some Pythonistas might point out that optional type checking already exists in Python 3 in the form of <a href="http://legacy.python.org/dev/peps/pep-3107/">function
annotations</a>. This allows you to specify function parameter types
in function and method definitions. With them you could use a module like <a href="https://github.com/ceronman/typeannotations">typeannotations</a>
which raises a TypeError exception in the event of a type mismatch.</p>

<p>There&rsquo;s also <a href="http://www.mypy-lang.org">MyPy</a> but it&rsquo;s not really Python per se, it&rsquo;s &ldquo;an experimental Python variant&rdquo;
which supports optional static typing.</p>

<p>I have no problem with these solutions, but I like RTV better.</p>

<ul>
<li>Explicit asserts are more flexible. We don&rsquo;t just care about class type, we also care about things like &ldquo;is integer in
valid range&rdquo;, &ldquo;is string of length N&rdquo;, &ldquo;is iterable > N items&rdquo;, etc. <strong>All</strong> these assumptions should be asserted.</li>
<li>See <a href="#assert_behavior">Assert Behavior</a> section above. Most of the time we don&rsquo;t want to lock parameters to just one explicit class.</li>
<li>No need for third party modules.</li>
<li>Works in Python 2.x</li>
<li>Explicit asserts double as documentation and make code intent more clear. They are right there underneath the docstring
and not off in some decorator definition somewhere.</li>
</ul>


<h2>Too Slow?</h2>

<p>I don&rsquo;t think this argument holds much water. If asserts are too slow you are using the wrong language for your
project. That said, you <em>can</em> turn asserts into no-ops by passing the <a href="http://stackoverflow.com/questions/2830358/what-are-the-implications-of-running-python-with-the-optimize-flag">-O flag</a>
to the Python interpreter. I think this defeats the purpose of writing the type verification in the first place, but it&rsquo;s an option.</p>
]]></content>
  </entry>
  
</feed>
